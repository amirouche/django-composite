from django.template import RequestContext
from django.template.loader import render_to_string
from django.core.exceptions import ImproperlyConfigured


class Widget(object):
    """Base class for all widgets.

    Recursive widgets are supported through ``widgets``
    class property or if you need a more fine grained
    widget through ``get_widgets()`` method. The default
    context inject every widget as a ``widgets`` variable in
    the template, for more complex usecases override ``get_context_data()``."""

    # following two properties are "hidden" with an underscore so that one can
    # embed supplemental static files besides those
    # provided by the user without having to implement a method
    # see BootstrapPage for example usage.
    _javascript_files = []
    _css_files = []

    template_name = None
    widgets = []

    def __init__(self):
        # Cache static files
        # XXX: same trick as in ``pages.Page``
        # XXX: this is done for every instantiation of this page class
        # which means when the view page is hooked in the url router
        # which is done the first time the code of the project is interpreted
        # this can be nicer but we do not need to add
        # a meta-class to do it at class instantiation time
        # when the cost of the operation is not significant.
        # If sometime in the future there is a usecase for page views
        # instanciated for every request, this change might be needed
        # XXX: this is kind of an evil naming but didn't find better
        # thing ``self.__*_files` is what is eventually added to
        # the rendered page
        self.__javascript_files = []
        self.__javascript_files.extends(self._javascript_files)
        self.__css_files = []
        self.__css_files.extends(self._css_files)
        for widget in self.get_widgets():
            self.__javascript_files.extends(widget.javascript_files)
            self.__css_files.extends(widget.css_files)


    def get_widgets(self, page, request, *args, **kwargs):
        """If you override this method you might want to cache
        the results for extra performance since it is called
        for every requests"""
        return self.widgets

    def get_template_names(self):
        """
        Returns a list of template names to be used for the request.
        Must return a list. May not be called if ``render`` is overridden.
        """
        if self.template_name is None:
            raise ImproperlyConfigured(
                "Widget requires either a definition of "
                "'template_name' or an implementation of 'get_template_names()'")
        else:
            return [self.template_name]

    def render(self, page, request, *args, **kwargs):
        ctx = self.get_context_data(request, *args, **kwargs)
        ctx = RequestContext(request, ctx)
        widget = render_to_string(self.template, ctx)
        return widget
